import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchGetNews } from './seekerAPI';

const initialState = {
  data: [],
  fetching: false,
  error: false
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchNewsAsync = createAsyncThunk(
  'seeker/fetchNews',
  async (query) => {
    const response = await fetchGetNews(query);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const seekerSlice = createSlice({
  name: 'seeker',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    deleteNew: (state, action) => {      
      const indexToDelete = action.payload;
      state.data = state.data.filter((news, index) => index !== indexToDelete)
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchNewsAsync.pending, (state) => {
        state.fetching = true;
      })
      .addCase(fetchNewsAsync.fulfilled, (state, action) => {
        state.fetching = false;
        state.data = action.payload.articles;
      })
      .addCase(fetchNewsAsync.rejected, (state, action) => {
        console.log(action.error)
        state.fetching = false
        state.error = true
      });
  },
});

export const { deleteNew } = seekerSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const seekerData = (state) => state.seeker;

export default seekerSlice.reducer;
